------------------------------------------------------------------------------
-- (c) Copyright 2019 Vyaire Medical, or one of its subsidiaries.
--     All Rights Reserved.
------------------------------------------------------------------------------
-- Tests fabian Terminal Interface library
------------------------------------------------------------------------------

ft      = require "fabian-Terminal"
pubFTI  = require "FTI-Public-Define"
verify  = require "verify"
utility = require "utility"

local portName = "COM6"
local on       = pubFTI.onOffState.ON
local off      = pubFTI.onOffState.OFF

print('fabian-regression-hfo-dual-limb-test: (' .. os.date() ..  ')')

local function testCPAP()
    print('Test pressure and backup pressure in CPAP mode:')
    print('------------- step 25 ---------------')
    ft.setVentMode(pubFTI.ventMode.CPAP)
    ft.setFlowMin__lpm(5)
    ft.setCPAP__mbar(5) 
    ft.setPManuel__mbar(15)
    ft.setBackup(0)
    print('------------- step 26 ---------------')
    print('INTERACTIVE: Decrease the low volume alarm threshold.')
	print('    - Press the alarm limits physical button.')
	print('    - On the alarm limits screen press the "MVexp" lower limit.')
	print('    - Spin the rotary knob to set the limit to "off". Press the nob to confirm the setting.')
	utility.promptForContinue()
    print('------------- step 27 ---------------')
    ft.delay_sec(30)
	print('------------- step 28 ---------------')
	verify.EXPECT_EQ_SET(ft.getWave(10).Pressure, 5, pubFTI.pressureTolerance__cmH2O) 
	verify.EXPECT_EQ(ft.getBTB().meanPressure, 5, pubFTI.pressureTolerance__cmH2O) 
	print('------------- step 29 ---------------')
	ft.setBackup(5)
    print('------------- step 30 ---------------')
    print('INTERACTIVE: Confirm backup is kicking in.')
	print('    - Confirm on the graph that 5 backup breaths are periodically occuring.')
	print('    - Confirm that the peak pressure shown on the graph during the breaths is approximately 15 mbar.')
	print('    - Confirm that the "Backup Active" alarm is shwon while tyhe backip nreaths are occuring.')
	local pass = utility.promptYesNoInput()
	utility.checkToContinue(pass)
    print('------------- step 31 ---------------')
    print('INTERACTIVE: Simulate spontaneous breaths.')
	print('------------- step 32 ---------------')
    print('INTERACTIVE: Check that there is no backupup ventilation.')
	print('    - Confirm the 5 periodic backup breaths are no longer occurring and being drawn on the graph.')
	print('    - Instead you will see a pattern based on how you squeezed the test lung.')
	utility.isAlarmActive(pubFTI.alarm.AL_NONE)
	pass = utility.promptYesNoInput()
	utility.checkToContinue(pass)
	print('------------- step 33 ---------------')
    print('INTERACTIVE: Stop simulating spontaneous breaths.')
	print('------------- step 34 ---------------')
    print('INTERACTIVE: Confirm backup is kicking in.')
	print('    - Confirm on the graph that 5 backup breaths are periodically occuring.')
	print('    - Confirm that the peak pressure shown on the graph during the breaths is approximately 15 mbar.')
	print('    - Confirm that the "Backup Active" alarm is shwon while tyhe backip nreaths are occuring.')
	pass = utility.promptYesNoInput()
	utility.checkToContinue(pass)
	print("CPAP test PASSED")
end


local function testCMV()
    print('Test pressure and graph in CMV mode:')
    print('------------- step 35 ---------------')
	ft.setVentMode(pubFTI.ventMode.IPPV)
    ft.setIFlow__lpm(8)
	ft.setPeep__mbar(5)
	ft.setPInsPressure__mbar(20)
	ft.setBPM__bpm(30)
	ft.setITime__sec(1)
	ft.setO2(21)
	print('------------- step 36 ---------------')
    ft.delay_sec(30)
	print('------------- step 37 ---------------')
	print('INTERACTIVE: Confirm that the graph shows a periodic breathing cycle.')
	print('INTERACTIVE: Confirm that the artifical lung is inflating and deflating.')
	verify.EXPECT_EQ(ft.getBTB().peakPressure, 20, pubFTI.pressureTolerance__cmH2O) 
	verify.EXPECT_EQ(ft.getBTB().PEEP, 5, pubFTI.pressureTolerance__cmH2O) 
	print('Checking no active alarms should occur during this time.')
	utility.isAlarmActive(pubFTI.alarm.AL_NONE)
	print('------------- step 38 ---------------')
	print('INTERACTIVE: Press the button to the left of the graph to view the Volume Graph.')
	print('    - Confirm on the peak pressure is 10 mbar and peep pressure is 1 mbar.')
	print('INTERACTIVE: Check that the flow graph.')
	print('    - Confirm on the peak pressure is 4 mbar and peep pressure is -4 mbar.')
	print('INTERACTIVE: Press the button to the left of the graph again to get back to the pressure graph.')
	print('    - Confirm on the peak pressure is 20 mbar and peep pressure is 5 mbar.')
	pass = utility.promptYesNoInput()
	utility.checkToContinue(pass)
	print('------------- step 82 ---------------')
	print('INTERACTIVE: Press the alarm limits button and set the PIP upper alarm limit below the actual PIP setting.')
	print('------------- step 83 ---------------')
	print('Checking that the High PIP/ High Pressure alarm is triggered. (This may take a few seconds)')
	utility.isAlarmActive(pubFTI.alarm.AL_PatAl_PIPmax)
	print('------------- step 84 ---------------')
	print('INTERACTIVE: Press the alarm limits button and set the PIP upper limit to 50 mbar and wait for the alarm to clear.')
	print('------------- step 85 ---------------')
	print('INTERACTIVE: Press the alarm limits button and set the PIP lower alarm limit above the actual PIP setting.')
	print('------------- step 86 ---------------')
	print('Checking that the lower PIP alarm is triggered.')
	utility.isAlarmActive(pubFTI.alarm.AL_PatAl_PIPmin)
	print('------------- step 87 ---------------')
	print('INTERACTIVE: Press the alarm limits button and set the PIP low limit to off and wait for the alarm to clear.')
	print('------------- step 88 ---------------')
	print('INTERACTIVE: Press the alarm limits button and set the PEEP lower alarm limit above the actual PEEP setting.')
	print('------------- step 89 ---------------')
	print('Checking that the Low PEEP alarm is triggered.')
	utility.isAlarmActive(pubFTI.alarm.AL_PatAl_PEEPminLow)
	print('------------- step 90 ---------------')
	print('INTERACTIVE: Press the alarm limits button and set the Low PEEP alarm limit to 0.0 and wait for the alarm to clear.')
	print('INTERACTIVE: Enter configuration Menu screen by press calibration button twice')
	print('INTERACTIVE: Enter Ventilation screen')
	print('INTERACTIVE: select the Vguarant')
	utility.promptForContinue()
	print('------------- step 91 ---------------')
	ft.setStateVGuarantee(1)
	print('INTERACTIVE: Set PMAX to 40.')
	utility.promptForContinue()
	ft.setVGuarantee__ml(10)
	print('------------- step 92 ---------------')
    ft.delay_sec(30)
	print('------------- step 93 ---------------')
	verify.EXPECT_EQ(ft.getBTB().expMandTidalVolume, 10, pubFTI.volumeTolerance__ml) 
	
    print("CMV test PASSED")
end

local function testASSIST()
    print('Test Assist mode:')
    print('------------- step 39 ---------------')
	ft.setVentMode(pubFTI.ventMode.SIPPV)
    ft.setIFlow__lpm(10)
	ft.setPeep__mbar(5)
	ft.setPInsPressure__mbar(20)
	ft.setBPM__bpm(30)
	ft.setITime__sec(1)
	ft.setTrigger(3)
	ft.setO2(21)
	print('------------- step 40 ---------------')
    ft.delay_sec(30)
	print('------------- step 41 ---------------')
	print('INTERACTIVE: Confirm that the graph shows a periodic breathing cycle.')
	print('INTERACTIVE: Confirm that the artifical lung is inflating and deflating.')
	verify.EXPECT_EQ(ft.getBTB().peakPressure, 20, pubFTI.pressureTolerance__cmH2O) 
	verify.EXPECT_EQ(ft.getBTB().PEEP, 5, pubFTI.pressureTolerance__cmH2O)
    verify.EXPECT_EQ(ft.getBTBAVG().respiratoryRate, 30, pubFTI.rateTolerance__bpm)	
	print('Checking no active alarms should occur during this time.')
	utility.isAlarmActive(pubFTI.alarm.AL_NONE)
	print('------------- step 42 ---------------')
    print('INTERACTIVE: Simulate spontaneous breaths.')
	print('------------- step 43 ---------------')
    print('INTERACTIVE: Check on the pressure graph that the simulated breaths are supported by the machine.')
	print('    - The graph pattern seen two steps ago should now be augmented with green to show the breaths caused by you squeezing the test lung.')
	pass = utility.promptYesNoInput()
	utility.checkToContinue(pass)
	print('------------- step 44 ---------------')
    print('INTERACTIVE: Stop simulating spontaneous breaths.')
	print("Assist test PASSED") 
end

local function testSIMV()
    print('Test SIMV mode:')
	print('------------- step 45 ---------------')
	ft.setVentMode(pubFTI.ventMode.SIMV)
	ft.setIFlow__lpm(10)
	ft.setPeep__mbar(5)
	ft.setPInsPressure__mbar(20)
	ft.setETime__sec(8)
	ft.setBPM__bpm(30)
	ft.setITime__sec(1)
	ft.setTrigger(1)
	ft.setO2(21)
	print('------------- step 46 ---------------')
    ft.delay_sec(30)
	print('------------- step 47 ---------------')
	print('INTERACTIVE: Confirm that the graph shows a periodic breathing cycle.')
	print('INTERACTIVE: Confirm that the artifical lung is inflating and deflating.')
	verify.EXPECT_EQ(ft.getBTB().peakPressure, 20, pubFTI.pressureTolerance__cmH2O) 
	verify.EXPECT_EQ(ft.getBTB().PEEP, 5, pubFTI.pressureTolerance__cmH2O)
    verify.EXPECT_EQ(ft.getBTBAVG().respiratoryRate, 30, pubFTI.pressureTolerance__cmH2O)	
	print('Checking no active alarms should occur during this time.')
	utility.isAlarmActive(pubFTI.alarm.AL_NONE)
	print('------------- step 48 ---------------')
    print('INTERACTIVE: Simulate spontaneous breaths.')
	print('------------- step 49 ---------------')
    print('INTERACTIVE: Check on the pressure graph that the simulated breaths are supported by the machine.')
	print('    - The graph pattern seen two steps ago should now be augmented with green to show the breaths caused by you squeezing the test lung.')
	pass = utility.promptYesNoInput()
	utility.checkToContinue(pass)
    print("SIMV test PASSED")
end

local function testSIMVPSV()
    print('Test SIMV+PSV mode:')
	print('------------- step 50 ---------------')
	ft.setVentMode(pubFTI.ventMode.SIMVPSV)
	ft.setIFlow__lpm(10)
	ft.setETime__sec(8)
	ft.setPeep__mbar(5)
	ft.setPInsPressure__mbar(20)
	ft.setPSV__mbar(10)
	ft.setBPM__bpm(10)
	ft.setITime__sec(1)
	ft.setTrigger(3)
	ft.setO2(21)
	print('------------- step 51 ---------------')
    ft.delay_sec(30)
	print('------------- step 52 ---------------')
	print('INTERACTIVE: Check that the ventilation occurs with the set parameters.')
	local pass = utility.promptYesNoInput()
	utility.checkToContinue(pass)
	print('------------- step 53 ---------------')
	print('Checking that no patient alarms are activated.')
	utility.isAlarmActive(pubFTI.alarm.AL_NONE)
	print('------------- step 54 ---------------')
	print('INTERACTIVE: Simulate spontaneous breaths.')
	print('------------- step 55 ---------------')
	print('INTERACTIVE: Check on the pressure graph to see the PSV is 10 mbar and the simulated breaths are supported by the machine.')
    pass = utility.promptYesNoInput()
	utility.checkToContinue(pass)
	print('------------- step 78 ---------------')
	print('INTERACTIVE: Press the alarm limits physical button and enable Apnea alarm.')
	print('    -  Set the limit to 2 Sec.')
	print('------------- step 79 ---------------')
	print('Checking that the Apnea alarm is triggered.')
	utility.isAlarmActive(pubFTI.alarm.AL_PatAl_Apnoe)
	print('------------- step 80 ---------------')
	print('INTERACTIVE: Press the alarm limits button and set the Apnea alarm to off and wait for the alarm to clear.')
	utility.isAlarmActive(pubFTI.alarm.AL_NONE)
	print("SIMV+PSV test PASSED")
end

local function testPSV()
    print('Test PSV mode:')
	print('------------- step 56 ---------------')
	ft.setVentMode(pubFTI.ventMode.PSV)
	ft.setIFlow__lpm(10)
	ft.setPeep__mbar(5)
	ft.setPInsPressure__mbar(20) --pbackup
	ft.setPSV__mbar(10)
	ft.setBackup(10)
	ft.setITime__sec(1)
	ft.setTrigger(3)
	ft.setO2(21)
	print('------------- step 57 ---------------')
    ft.delay_sec(30)
	print('------------- step 58 ---------------')
    print('INTERACTIVE: Check that the apnea ventilation occurs with the set parameters.')
	pass = utility.promptYesNoInput()
	utility.checkToContinue(pass)
	print('------------- step 59 ---------------')
	print('INTERACTIVE: Simulate spontaneous breaths.')
	print('------------- step 60 ---------------')
	print('INTERACTIVE: Check on the pressure graph to see the PSV is 10 mbar and the simulated breaths are supported by the machine.')
	pass = utility.promptYesNoInput()
	utility.checkToContinue(pass)
    print("PSV test PASSED")
end


---------------------------------------------------------------------
-- function call
---------------------------------------------------------------------
ft.openCOM(portName)
ft.initalizeVent()
testCPAP()
testCMV() 
testASSIST()
testSIMV()
testSIMVPSV()
testPSV()
print('Please go to step 108 to finish the remainder of the regression test.')

ft.closeCOM()